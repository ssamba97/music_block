/*
A simple Java class that writes a MIDI file

(c)2011 Kevin Boone, all rights reserved
*/

import java.io.*;
import java.util.*;
import java.util.Map.Entry;

public class MidiFile {
	static Scanner sc = new Scanner(System.in);
	// Note lengths
	//  We are working with 32 ticks to the crotchet. So
	//  all the other note lengths can be derived from this
	//  basic figure. Note that the longest note we can
	//  represent with this code is one tick short of a 
	//  two semibreves (i.e., 8 crotchets)

	// d_DO + 47 = 48 (3ø¡≈∏∫Í µµ) ~ u_TI + 47 = 83 (5ø¡≈∏∫Í Ω√)
	static final int d_DO = 0x001;
	static final int d_DO_s = 0x002;
	static final int d_RE = 0x003;
	static final int d_RE_s = 0x004;
	static final int d_MI = 0x005;
	static final int d_FA = 0x006;
	static final int d_FA_s = 0x007;
	static final int d_SOL = 0x008;
	static final int d_SOL_s = 0x009;
	static final int d_LA = 0x00A;
	static final int d_LA_s = 0x00B;
	static final int d_TI = 0x00C;
	static final int n_DO = 0x00D;
	static final int n_DO_s = 0x00E;
	static final int n_RE = 0x00F;
	static final int n_RE_s = 0x010;
	static final int n_MI = 0x011;
	static final int n_FA = 0x012;
	static final int n_FA_s = 0x013;
	static final int n_SOL = 0x014;
	static final int n_SOL_s = 0x015;
	static final int n_LA = 0x016;
	static final int n_LA_s = 0x017;
	static final int n_TI = 0x018;
	static final int u_DO = 0x019;
	static final int u_DO_s = 0x01A;
	static final int u_RE = 0x01B;
	static final int u_RE_s = 0x01C;
	static final int u_MI = 0x01D;
	static final int u_FA = 0x01E;
	static final int u_FA_s = 0x01F;
	static final int u_SOL = 0x020;
	static final int u_SOL_s = 0x021;
	static final int u_LA = 0x022;
	static final int u_LA_s = 0x023;
	static final int u_TI = 0x024;

	static int[][] songArray = new int[][] { { n_RE, n_RE, n_RE, 0x00, 0x00, 0x00, 0x00 }, { n_MI, n_MI, n_MI, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st  baby
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ n_RE, n_RE, n_RE, 0x00, 0x00, 0x00, 0x00 }, { n_MI, n_MI, n_MI, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 2'nd  mother
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 2'nd
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ n_RE, n_RE, n_RE, 0x00, 0x00, 0x00, 0x00 }, { n_MI, n_MI, n_MI, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 3'rd  father
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 3'rd    
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st        
			{ n_RE, n_RE, n_RE, 0x00, 0x00, 0x00, 0x00 }, { n_MI, n_MI, n_MI, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 4'th  grandmother
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 4'th  
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //  1'st
			{ n_RE, n_RE, n_RE, 0x00, 0x00, 0x00, 0x00 }, { n_MI, n_MI, n_MI, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_RE, n_RE, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_MI, n_MI, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ n_SOL, n_SOL, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 }, { n_FA_s, n_FA_s, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 5'th  grandfather
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 5'th  
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } };

	static final int SEMIQUAVER = 4;
	static final int QUAVER = 8;
	static final int CROTCHET = 16;
	static final int MINIM = 32;
	static final int SEMIBREVE = 64;

	// Standard MIDI file header, for one-track file
	// 4D, 54... are just magic numbers to identify the
	//  headers
	// Note that because we're only writing one track, we
	//  can for simplicity combine the file and track headers
	static final int header[] = new int[] { 0x4d, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // single-track format
			0x00, 0x01, // one track
			0x00, 0x16, // 16 ticks per quarter
			0x4d, 0x54, 0x72, 0x6B };

	//	static final int header[] = new int[]
	//			{
	//			   0x4d, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06,
	//			   0x00, 0x00, // single-track format
	//			   0x00, 0x01, // one track
	//			   0x00, 0x10, // 16 ticks per quarter
	//			   0x4d, 0x54, 0x72, 0x6B
	//			};

	// Standard footer
	static final int footer[] = new int[] { 0x01, 0xFF, 0x2F, 0x00 };

	// A MIDI event to set the tempo
	static final int tempoEvent[] = new int[] { 0x00, 0xFF, 0x51, 0x03, 0x0F, 0x42, 0x40 // Default 1 million usec per crotchet
	};

	// A MIDI event to set the key signature. This is irrelent to
	//  playback, but necessary for editing applications 
	static final int keySigEvent[] = new int[] { 0x00, 0xFF, 0x59, 0x02, 0x00, // C
			0x00 // major
	};

	// A MIDI event to set the time signature. This is irrelent to
	//  playback, but necessary for editing applications 
	static final int timeSigEvent[] = new int[] { 0x00, 0xFF, 0x58, 0x04, 0x04, // numerator
			0x02, // denominator (2==4, because it's a power of 2)
			0x30, // ticks per click (not used)
			0x08 // 32nd notes per crotchet 
	};

	// The collection of events to play, in time order
	protected Vector<int[]> playEvents;

	/** Construct a new MidiFile with an empty playback event list */
	public MidiFile() {
		playEvents = new Vector<int[]>();
	}

	/** Write the stored MIDI events to a file */
	public void writeToFile(String filename) throws IOException {
		FileOutputStream fos = new FileOutputStream(filename);

		fos.write(intArrayToByteArray(header));

		// Calculate the amount of track data
		// _Do_ include the footer but _do not_ include the 
		// track header

		int size = tempoEvent.length + keySigEvent.length + timeSigEvent.length + footer.length;

		for (int i = 0; i < playEvents.size(); i++)
			size += playEvents.elementAt(i).length;

		// Write out the track data size in big-endian format
		// Note that this math is only valid for up to 64k of data
		//  (but that's a lot of notes) 
		int high = size / 256;
		int low = size - (high * 256);
		fos.write((byte) 0);
		fos.write((byte) 0);
		fos.write((byte) high);
		fos.write((byte) low);

		// Write the standard metadata ÔøΩÔøΩ tempo, etc
		// At present, tempo is stuck at crotchet=60 
		fos.write(intArrayToByteArray(tempoEvent));
		fos.write(intArrayToByteArray(keySigEvent));
		fos.write(intArrayToByteArray(timeSigEvent));

		// Write out the note, etc., events
		for (int i = 0; i < playEvents.size(); i++) {
			fos.write(intArrayToByteArray(playEvents.elementAt(i)));
		}

		// Write the footer and close
		fos.write(intArrayToByteArray(footer));
		fos.close();
	}

	/**
	 * Convert an array of integers which are assumed to contain unsigned bytes into
	 * an array of bytes
	 */
	protected static byte[] intArrayToByteArray(int[] ints) {
		int l = ints.length;
		byte[] out = new byte[ints.length];
		for (int i = 0; i < l; i++) {
			out[i] = (byte) ints[i];
		}
		return out;
	}

	/** Store a note-on event */
	public void noteOn(int delta, int note, int velocity) {
		int[] data = new int[4];
		data[0] = delta;
		data[1] = 0x90;
		data[2] = note;
		data[3] = velocity;
		playEvents.add(data);
	}

	/** Store a note-off event */
	public void noteOff(int delta, int note) {
		int[] data = new int[4];
		data[0] = delta;
		data[1] = 0x80;
		data[2] = note;
		data[3] = 0;
		playEvents.add(data);
	}

	/** Store a program-change event at current position */
	public void progChange(int prog) {
		int[] data = new int[3];
		data[0] = 0;
		data[1] = 0xC0;
		data[2] = prog;
		playEvents.add(data);
	}

	/**
	 * Store a note-on event followed by a note-off event a note length later. There
	 * is no delta value ÔøΩÔøΩ the note is assumed to follow the previous one with no
	 * gap.
	 */
	public void noteOnOffNow(int duration, int note, int velocity) {
		noteOn(0, note, velocity);
		noteOff(duration, note);
	}

	public void noteSequenceFixedVelocity(int[] sequence, int velocity) {
		boolean lastWasRest = false;
		int restDelta = 0;
		for (int i = 0; i < sequence.length; i += 2) {
			int note = sequence[i];
			int duration = sequence[i + 1];
			if (note < 0) {
				// This is a rest
				restDelta += duration;
				lastWasRest = true;
			} else {
				// A note, not a rest
				if (lastWasRest) {
					noteOn(restDelta, note, velocity);
					noteOff(duration, note);
				} else {
					noteOn(0, note, velocity);
					noteOff(duration, note);
				}
				restDelta = 0;
				lastWasRest = false;
			}
		}
	}

	/**
	 * Test method ÔøΩÔøΩ creates a file test1.mid when the class is executed
	 */
	public static void main(String[] args) throws Exception {
		MidiFile mf = new MidiFile();

		// Test 1 ÔøΩÔøΩ play a C major chord

//				mf.noteOn(0, 60, 127);
//				mf.noteOff(MINIM, 60);

		//		mf.noteOnOffNow(CROTCHET, 60, 127);
		//		mf.noteOnOffNow(CROTCHET, 62, 127);
		//		mf.noteOnOffNow(CROTCHET, 64, 127);
		//		mf.noteOnOffNow(CROTCHET, 65, 127);
		//		mf.noteOnOffNow(CROTCHET, 67, 127);
		//		mf.noteOnOffNow(CROTCHET, 69, 127);
		//		mf.noteOnOffNow(CROTCHET, 71, 127);
		//		mf.noteOnOffNow(CROTCHET, 72, 127);

		// Test 3 ÔøΩÔøΩ play a short tune using noteSequenceFixedVelocity
		//  Note the rest inserted with a note value of -1

		//		int[] sequence = new int[] { 78, QUAVER, 65, MINIM};
		//		int[] sequence = new int[] { 60, QUAVER + SEMIQUAVER, 65, SEMIQUAVER, 70, CROTCHET + QUAVER, 69, QUAVER, 65, QUAVER / 3, 62, QUAVER / 3, 67, QUAVER / 3, 72, MINIM + QUAVER, -1, SEMIQUAVER, 72,
		//				SEMIQUAVER, 76, MINIM, };
		//
		//		// What the heck ÔøΩÔøΩ use a different instrument for a change
		//		mf.progChange(10); // æ«±‚∫Ø∞Ê
		//
		//		mf.noteSequenceFixedVelocity(sequence, 127);

		
		HashMap<Integer, Integer> scaleMap = new HashMap<Integer, Integer>();

		for (int x = 0; x < songArray.length; x++) {
			scaleMap.clear(); // HashMap √ ±‚»≠
			
			for (int y = 0; y < 7; y++) { // πËø≠ø°º≠ ¿Ω¿« ¡æ∑˘øÕ ∞≥ºˆ æÚæÓøÕº≠ ¿˙¿Â«œ±‚
				if (songArray[x][y] != 0x00) {
					if (scaleMap.containsKey(songArray[x][y])) { // ¿Ω¿Ã ¿ÃπÃ ¿÷¥Ÿ∏È (πﬂ∞ﬂ«— ¿Ω¿ª ±‚æÔ«— ¿˚¿Ã ¿÷¥Ÿ∏È)
						scaleMap.put(songArray[x][y], scaleMap.get(songArray[x][y]) + 1); // ø¯∑° ¿÷¥¯ ∞∞¿∫ ¿Ω ∞≥ºˆø° +1 
					} else {
						scaleMap.put(songArray[x][y], 1); // πﬂ∞ﬂ«— ¿Ω ±‚æÔ«œ±‚
					}
				}
			}
			
			if (!scaleMap.isEmpty()) { // ¿Ãπ¯ ƒ≠ø° ¿Ω¿Ã ¿÷¥Ÿ∏È
				for (int note : scaleMap.keySet()) { // ¿œ¥‹ ¿Ω ¿¸∫Œ ø¨¡÷«œ±‚
					mf.noteOn(0, note + 47, 127); 
				}

				// ¿Ω¿« ∞≥ºˆ ±‚¡ÿ¿∏∑Œ ø¿∏ß¬˜º¯ ¡§∑ƒ«œ±‚
				ArrayList<Integer> sortByValue = new ArrayList<Integer>(scaleMap.keySet());
				Collections.sort(sortByValue, new Comparator() {
					@Override
					public int compare(Object o1, Object o2) {
						Object v1 = scaleMap.get(o1);
						Object v2 = scaleMap.get(o2);
						return ((Comparable) v1).compareTo(v2);
					}
				});

				int preValue = 0; // ¿Ã¿¸ ≥Î∆Æ ∞≥ºˆ∏¶ ¿˙¿Â
				for (int note : sortByValue) {
					// ±‚∫ª π⁄¿⁄ * 2¿« [«ˆ¿Á≥Î∆Æ∞≥ºˆ - ¿Ã¿¸≥Î∆Æ∞≥ºˆ]Ω¬ ∏∏≈≠ »ƒø° ¡æ∑·
					mf.noteOff((int) (SEMIQUAVER * Math.pow(2, (scaleMap.get(note) - 1) - preValue)), note + 47);
					preValue = scaleMap.get(note); // «ˆ¿Á ≥Î∆Æ ∞≥ºˆ ¿˙¿Â«ÿµŒ±‚
				}
			} else { // ¿Ãπ¯ ƒ≠ø° ¿Ω¿Ã æ¯¥Ÿ∏È
				// ±‚∫ª π⁄¿⁄∏∏≈≠ æ∆π´∞Õµµ ø¨¡÷ æ»«‘
				mf.noteOn(0, 0, 0);
				mf.noteOff(SEMIQUAVER, 0);
			}
		}
		
		mf.writeToFile("test1.mid");
	}
}